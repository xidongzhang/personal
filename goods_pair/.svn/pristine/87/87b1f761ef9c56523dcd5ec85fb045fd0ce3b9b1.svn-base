#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PairServerRequest:
  """
  Attributes:
   - uid
   - tid
   - device_id
   - model_version
   - recalculate
   - write_to_redis
   - cata_recall_num
   - similar_tid_recall_num
   - match_tid_recall_num
   - similar_tid_return_num
   - match_tid_return_num
   - rank_tids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I64, 'tid', None, None, ), # 2
    (3, TType.STRING, 'device_id', None, None, ), # 3
    (4, TType.MAP, 'model_version', (TType.I16,None,TType.STRING,None), None, ), # 4
    (5, TType.BOOL, 'recalculate', None, None, ), # 5
    (6, TType.BOOL, 'write_to_redis', None, None, ), # 6
    (7, TType.I16, 'cata_recall_num', None, None, ), # 7
    (8, TType.I16, 'similar_tid_recall_num', None, None, ), # 8
    (9, TType.I16, 'match_tid_recall_num', None, None, ), # 9
    (10, TType.I16, 'similar_tid_return_num', None, None, ), # 10
    (11, TType.I16, 'match_tid_return_num', None, None, ), # 11
    (12, TType.LIST, 'rank_tids', (TType.I64,None), None, ), # 12
  )

  def __init__(self, uid=None, tid=None, device_id=None, model_version=None, recalculate=None, write_to_redis=None, cata_recall_num=None, similar_tid_recall_num=None, match_tid_recall_num=None, similar_tid_return_num=None, match_tid_return_num=None, rank_tids=None,):
    self.uid = uid
    self.tid = tid
    self.device_id = device_id
    self.model_version = model_version
    self.recalculate = recalculate
    self.write_to_redis = write_to_redis
    self.cata_recall_num = cata_recall_num
    self.similar_tid_recall_num = similar_tid_recall_num
    self.match_tid_recall_num = match_tid_recall_num
    self.similar_tid_return_num = similar_tid_return_num
    self.match_tid_return_num = match_tid_return_num
    self.rank_tids = rank_tids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.device_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.model_version = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readI16();
            _val6 = iprot.readString();
            self.model_version[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.recalculate = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.write_to_redis = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.cata_recall_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.similar_tid_recall_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.match_tid_recall_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.similar_tid_return_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.match_tid_return_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.rank_tids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.rank_tids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PairServerRequest')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.tid is not None:
      oprot.writeFieldBegin('tid', TType.I64, 2)
      oprot.writeI64(self.tid)
      oprot.writeFieldEnd()
    if self.device_id is not None:
      oprot.writeFieldBegin('device_id', TType.STRING, 3)
      oprot.writeString(self.device_id)
      oprot.writeFieldEnd()
    if self.model_version is not None:
      oprot.writeFieldBegin('model_version', TType.MAP, 4)
      oprot.writeMapBegin(TType.I16, TType.STRING, len(self.model_version))
      for kiter13,viter14 in self.model_version.items():
        oprot.writeI16(kiter13)
        oprot.writeString(viter14)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.recalculate is not None:
      oprot.writeFieldBegin('recalculate', TType.BOOL, 5)
      oprot.writeBool(self.recalculate)
      oprot.writeFieldEnd()
    if self.write_to_redis is not None:
      oprot.writeFieldBegin('write_to_redis', TType.BOOL, 6)
      oprot.writeBool(self.write_to_redis)
      oprot.writeFieldEnd()
    if self.cata_recall_num is not None:
      oprot.writeFieldBegin('cata_recall_num', TType.I16, 7)
      oprot.writeI16(self.cata_recall_num)
      oprot.writeFieldEnd()
    if self.similar_tid_recall_num is not None:
      oprot.writeFieldBegin('similar_tid_recall_num', TType.I16, 8)
      oprot.writeI16(self.similar_tid_recall_num)
      oprot.writeFieldEnd()
    if self.match_tid_recall_num is not None:
      oprot.writeFieldBegin('match_tid_recall_num', TType.I16, 9)
      oprot.writeI16(self.match_tid_recall_num)
      oprot.writeFieldEnd()
    if self.similar_tid_return_num is not None:
      oprot.writeFieldBegin('similar_tid_return_num', TType.I16, 10)
      oprot.writeI16(self.similar_tid_return_num)
      oprot.writeFieldEnd()
    if self.match_tid_return_num is not None:
      oprot.writeFieldBegin('match_tid_return_num', TType.I16, 11)
      oprot.writeI16(self.match_tid_return_num)
      oprot.writeFieldEnd()
    if self.rank_tids is not None:
      oprot.writeFieldBegin('rank_tids', TType.LIST, 12)
      oprot.writeListBegin(TType.I64, len(self.rank_tids))
      for iter15 in self.rank_tids:
        oprot.writeI64(iter15)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PairServerResponse:
  """
  Attributes:
   - rcode
   - similar_tids
   - match_tids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'rcode', None, None, ), # 1
    (2, TType.LIST, 'similar_tids', (TType.I64,None), None, ), # 2
    (3, TType.MAP, 'match_tids', (TType.STRING,None,TType.LIST,(TType.I64,None)), None, ), # 3
  )

  def __init__(self, rcode=None, similar_tids=None, match_tids=None,):
    self.rcode = rcode
    self.similar_tids = similar_tids
    self.match_tids = match_tids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.rcode = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.similar_tids = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readI64();
            self.similar_tids.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.match_tids = {}
          (_ktype23, _vtype24, _size22 ) = iprot.readMapBegin() 
          for _i26 in xrange(_size22):
            _key27 = iprot.readString();
            _val28 = []
            (_etype32, _size29) = iprot.readListBegin()
            for _i33 in xrange(_size29):
              _elem34 = iprot.readI64();
              _val28.append(_elem34)
            iprot.readListEnd()
            self.match_tids[_key27] = _val28
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PairServerResponse')
    if self.rcode is not None:
      oprot.writeFieldBegin('rcode', TType.I16, 1)
      oprot.writeI16(self.rcode)
      oprot.writeFieldEnd()
    if self.similar_tids is not None:
      oprot.writeFieldBegin('similar_tids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.similar_tids))
      for iter35 in self.similar_tids:
        oprot.writeI64(iter35)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.match_tids is not None:
      oprot.writeFieldBegin('match_tids', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.match_tids))
      for kiter36,viter37 in self.match_tids.items():
        oprot.writeString(kiter36)
        oprot.writeListBegin(TType.I64, len(viter37))
        for iter38 in viter37:
          oprot.writeI64(iter38)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
